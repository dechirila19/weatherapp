{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","API_key","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39725012.chunk.js","sourcesContent":["import react from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n        <div className=\"cards pt-4\">\r\n        <h1>\r\n        {props.city}\r\n        </h1>\r\n        <h5 className=\"py-4\">\r\n            <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n\r\n        { props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/** show max and min temp */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min,max) {\r\n    if(min && max){\r\n        return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n\r\n    );\r\n}\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error ? error(): null}</div>\r\n        <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n            <input \r\n            type=\"text\" \r\n            className=\"form-control\" \r\n            name=\"city\" \r\n            autoComplete=\"off\" \r\n            placeholder=\"City\"\r\n            />\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n            <input \r\n            type=\"text\" \r\n            className=\"form-control\" \r\n            name=\"country\" \r\n            autoComplete=\"off\"\r\n            placeholder=\"Country\"\r\n            />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please enter City and country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './app_component/form.component';\n\nconst API_key = `fe25edfb7fe8598b4fbfe5c3f7892102`;\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor( temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rangeId === 800:\n        this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon: this.weatherIcon.Clouds});\n        break;\n        default:\n          this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n    if(city&&country){\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n        );\n\n    const response = await api_call.json()\n\n    console.log(response);\n\n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      country: response.sys.country,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      error: false\n    });\n\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  }else{\n    this.setState({error: true});\n  }\n};\n\n  \n  render() {\n    return(\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error} />\n      <Weather \n      city={this.state.city} \n      country={this.state.country} \n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weatherIcon={this.state.icon}\n      />\n      </div>\n     );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}